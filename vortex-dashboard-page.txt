'use client'

import React, { useState, useEffect } from 'react'
import { useQuery, useSubscription } from '@apollo/client'
import { 
  LineChart, Line, AreaChart, Area, BarChart, Bar, 
  PieChart, Pie, Cell, XAxis, YAxis, CartesianGrid, 
  Tooltip, Legend, ResponsiveContainer 
} from 'recharts'
import { 
  Activity, Users, Server, Zap, Shield, TrendingUp, 
  AlertTriangle, Clock, Globe, Cpu, HardDrive, Database,
  Download, Upload, RefreshCw, MoreVertical
} from 'lucide-react'
import { formatBytes, formatSpeed, formatPercent, formatRelativeTime, formatNumber } from '@/lib/utils'
import { withAuth } from '@/contexts/auth-context'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Progress } from '@/components/ui/progress'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { 
  DropdownMenu, 
  DropdownMenuContent, 
  DropdownMenuItem, 
  DropdownMenuTrigger 
} from '@/components/ui/dropdown-menu'
import {
  ANALYTICS_OVERVIEW_QUERY,
  SYSTEM_STATUS_QUERY,
  SYSTEM_METRICS_SUBSCRIPTION,
  TRAFFIC_STATS_QUERY
} from '@/graphql/analytics'

// Цвета для графиков
const COLORS = {
  primary: '#3b82f6',
  secondary: '#8b5cf6',
  success: '#10b981',
  warning: '#f59e0b',
  danger: '#ef4444',
  info: '#06b6d4',
}

const CHART_COLORS = [
  COLORS.primary,
  COLORS.secondary,
  COLORS.success,
  COLORS.warning,
  COLORS.danger,
  COLORS.info,
]

function DashboardPage() {
  const [timeRange, setTimeRange] = useState('24h')
  
  // Запросы данных
  const { data: analyticsData, loading: analyticsLoading, refetch: refetchAnalytics } = useQuery(
    ANALYTICS_OVERVIEW_QUERY,
    {
      variables: { period: timeRange },
      pollInterval: 30000, // Обновление каждые 30 секунд
    }
  )
  
  const { data: systemData, loading: systemLoading } = useQuery(SYSTEM_STATUS_QUERY, {
    pollInterval: 10000, // Обновление каждые 10 секунд
  })
  
  const { data: trafficData, loading: trafficLoading } = useQuery(TRAFFIC_STATS_QUERY, {
    variables: { period: timeRange },
    pollInterval: 60000, // Обновление каждую минуту
  })
  
  // Подписка на real-time метрики
  const { data: metricsData } = useSubscription(SYSTEM_METRICS_SUBSCRIPTION)
  
  // Обновление данных при изменении периода
  useEffect(() => {
    refetchAnalytics()
  }, [timeRange, refetchAnalytics])
  
  const loading = analyticsLoading || systemLoading || trafficLoading
  
  if (loading) {
    return <DashboardSkeleton />
  }
  
  const analytics = analyticsData?.analytics
  const systemStatus = systemData?.systemStatus
  const systemMetrics = metricsData?.systemMetrics || analytics?.systemMetrics
  const traffic = trafficData?.trafficStats
  
  return (
    <div className="flex-1 space-y-4 p-4 md:p-8 pt-6">
      {/* Заголовок */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-3xl font-bold tracking-tight">Панель управления</h2>
          <p className="text-muted-foreground">
            Добро пожаловать в VortexPanel
          </p>
        </div>
        
        <div className="flex items-center space-x-2">
          {/* Селектор периода времени */}
          <Tabs value={timeRange} onValueChange={setTimeRange}>
            <TabsList>
              <TabsTrigger value="1h">1ч</TabsTrigger>
              <TabsTrigger value="6h">6ч</TabsTrigger>
              <TabsTrigger value="24h">24ч</TabsTrigger>
              <TabsTrigger value="7d">7д</TabsTrigger>
              <TabsTrigger value="30d">30д</TabsTrigger>
            </TabsList>
          </Tabs>
          
          <Button
            variant="outline"
            size="icon"
            onClick={() => {
              refetchAnalytics()
            }}
          >
            <RefreshCw className="h-4 w-4" />
          </Button>
        </div>
      </div>
      
      {/* Метрики */}
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
        <MetricCard
          title="Активные пользователи"
          value={formatNumber(systemMetrics?.activeUsers || 0)}
          icon={Users}
          trend={analytics?.usersTrend}
          color="blue"
        />
        <MetricCard
          title="Активные соединения"
          value={formatNumber(systemMetrics?.activeConnections || 0)}
          icon={Activity}
          trend={analytics?.connectionsTrend}
          color="green"
        />
        <MetricCard
          title="Общий трафик"
          value={formatBytes(systemMetrics?.totalTraffic || 0)}
          icon={Server}
          trend={analytics?.trafficTrend}
          color="purple"
        />
        <MetricCard
          title="Пропускная способность"
          value={formatSpeed(systemMetrics?.bandwidthUsage || 0)}
          icon={Zap}
          color="yellow"
        />
      </div>
      
      {/* Графики трафика */}
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-7">
        <Card className="col-span-4">
          <CardHeader>
            <CardTitle>Обзор трафика</CardTitle>
            <CardDescription>
              Входящий и исходящий трафик за выбранный период
            </CardDescription>
          </CardHeader>
          <CardContent className="pl-2">
            <ResponsiveContainer width="100%" height={350}>
              <AreaChart data={traffic?.points || []}>
                <defs>
                  <linearGradient id="colorDownload" x1="0" y1="0" x2="0" y2="1">
                    <stop offset="5%" stopColor={COLORS.primary} stopOpacity={0.8}/>
                    <stop offset="95%" stopColor={COLORS.primary} stopOpacity={0}/>
                  </linearGradient>
                  <linearGradient id="colorUpload" x1="0" y1="0" x2="0" y2="1">
                    <stop offset="5%" stopColor={COLORS.success} stopOpacity={0.8}/>
                    <stop offset="95%" stopColor={COLORS.success} stopOpacity={0}/>
                  </linearGradient>
                </defs>
                <CartesianGrid strokeDasharray="3 3" className="stroke-muted" />
                <XAxis 
                  dataKey="time" 
                  className="text-xs"
                  tickFormatter={(value) => new Date(value).toLocaleTimeString('ru-RU', { 
                    hour: '2-digit', 
                    minute: '2-digit' 
                  })}
                />
                <YAxis 
                  className="text-xs"
                  tickFormatter={(value) => formatBytes(value)}
                />
                <Tooltip 
                  formatter={(value: number) => formatBytes(value)}
                  labelFormatter={(label) => new Date(label).toLocaleString('ru-RU')}
                  contentStyle={{
                    backgroundColor: 'hsl(var(--card))',
                    border: '1px solid hsl(var(--border))',
                    borderRadius: 'var(--radius)',
                  }}
                />
                <Legend />
                <Area
                  type="monotone"
                  dataKey="download"
                  name="Загрузка"
                  stroke={COLORS.primary}
                  fillOpacity={1}
                  fill="url(#colorDownload)"
                />
                <Area
                  type="monotone"
                  dataKey="upload"
                  name="Отправка"
                  stroke={COLORS.success}
                  fillOpacity={1}
                  fill="url(#colorUpload)"
                />
              </AreaChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>
        
        {/* Распределение протоколов */}
        <Card className="col-span-3">
          <CardHeader>
            <CardTitle>Распределение протоколов</CardTitle>
            <CardDescription>
              Использование различных протоколов
            </CardDescription>
          </CardHeader>
          <CardContent>
            <ResponsiveContainer width="100%" height={300}>
              <PieChart>
                <Pie
                  data={analytics?.protocolDistribution || []}
                  cx="50%"
                  cy="50%"
                  labelLine={false}
                  label={renderCustomizedLabel}
                  outerRadius={80}
                  fill="#8884d8"
                  dataKey="value"
                >
                  {(analytics?.protocolDistribution || []).map((entry: any, index: number) => (
                    <Cell key={`cell-${index}`} fill={CHART_COLORS[index % CHART_COLORS.length]} />
                  ))}
                </Pie>
                <Tooltip 
                  formatter={(value: number) => `${value}%`}
                  contentStyle={{
                    backgroundColor: 'hsl(var(--card))',
                    border: '1px solid hsl(var(--border))',
                    borderRadius: 'var(--radius)',
                  }}
                />
              </PieChart>
            </ResponsiveContainer>
            <div className="mt-4 space-y-2">
              {analytics?.protocolDistribution?.map((protocol: any, index: number) => (
                <div key={protocol.name} className="flex items-center justify-between">
                  <div className="flex items-center space-x-2">
                    <div 
                      className="w-3 h-3 rounded-full" 
                      style={{ backgroundColor: CHART_COLORS[index % CHART_COLORS.length] }}
                    />
                    <span className="text-sm font-medium">{protocol.name}</span>
                  </div>
                  <span className="text-sm text-muted-foreground">{protocol.value}%</span>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      </div>
      
      {/* Нижняя часть */}
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
        {/* Системные ресурсы */}
        <Card>
          <CardHeader>
            <CardTitle>Системные ресурсы</CardTitle>
            <CardDescription>
              Использование ресурсов сервера
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <ResourceBar
              label="CPU"
              value={systemMetrics?.cpuUsage || 0}
              icon={Cpu}
              color="blue"
            />
            <ResourceBar
              label="Память"
              value={systemMetrics?.memoryUsage || 0}
              icon={HardDrive}
              color="green"
            />
            <ResourceBar
              label="Диск"
              value={systemMetrics?.diskUsage || 0}
              icon={Database}
              color="purple"
            />
            <div className="pt-2 space-y-1 text-sm text-muted-foreground">
              <div className="flex justify-between">
                <span>Процессор</span>
                <span>{systemStatus?.resources?.cpu?.cores || 0} ядер</span>
              </div>
              <div className="flex justify-between">
                <span>Память</span>
                <span>{formatBytes(systemStatus?.resources?.memory?.total || 0)}</span>
              </div>
              <div className="flex justify-between">
                <span>Диск</span>
                <span>{formatBytes(systemStatus?.resources?.disk?.total || 0)}</span>
              </div>
            </div>
          </CardContent>
        </Card>
        
        {/* Топ пользователей */}
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle>Топ пользователей</CardTitle>
            <Button variant="ghost" size="sm">
              Все
            </Button>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {analytics?.topUsers?.slice(0, 5).map((user: any, index: number) => (
                <div key={user.clientId} className="flex items-center justify-between">
                  <div className="flex items-center space-x-3">
                    <div className="flex h-8 w-8 items-center justify-center rounded-full bg-muted text-sm font-medium">
                      {index + 1}
                    </div>
                    <div className="space-y-1">
                      <p className="text-sm font-medium leading-none">
                        {user.username || user.clientId}
                      </p>
                      <p className="text-xs text-muted-foreground">
                        {formatBytes(user.traffic)}
                      </p>
                    </div>
                  </div>
                  <TrendIndicator value={user.trend} />
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
        
        {/* Обнаруженные аномалии */}
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle>Аномалии</CardTitle>
            <AlertTriangle className="h-4 w-4 text-warning" />
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {analytics?.anomalies?.length > 0 ? (
                analytics.anomalies.slice(0, 5).map((anomaly: any) => (
                  <div key={anomaly.id} className="rounded-lg border p-3">
                    <div className="flex items-center justify-between">
                      <span className="text-sm font-medium">{anomaly.clientId}</span>
                      <Badge variant={getSeverityVariant(anomaly.severity)}>
                        {anomaly.severity}
                      </Badge>
                    </div>
                    <p className="text-xs text-muted-foreground mt-1">
                      {anomaly.description}
                    </p>
                    <p className="text-xs text-muted-foreground flex items-center mt-1">
                      <Clock className="mr-1 h-3 w-3" />
                      {formatRelativeTime(anomaly.timestamp)}
                    </p>
                  </div>
                ))
              ) : (
                <div className="text-center py-8 text-muted-foreground">
                  <Shield className="mx-auto h-8 w-8 mb-2" />
                  <p className="text-sm">Аномалий не обнаружено</p>
                </div>
              )}
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}

// Компонент карточки метрики
function MetricCard({ 
  title, 
  value, 
  icon: Icon, 
  trend, 
  color = 'blue' 
}: {
  title: string
  value: string
  icon: React.ElementType
  trend?: number
  color?: 'blue' | 'green' | 'purple' | 'yellow'
}) {
  const colorClasses = {
    blue: 'bg-blue-500/10 text-blue-500',
    green: 'bg-green-500/10 text-green-500',
    purple: 'bg-purple-500/10 text-purple-500',
    yellow: 'bg-yellow-500/10 text-yellow-500',
  }
  
  return (
    <Card>
      <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
        <CardTitle className="text-sm font-medium">{title}</CardTitle>
        <div className={`rounded-lg p-2 ${colorClasses[color]}`}>
          <Icon className="h-4 w-4" />
        </div>
      </CardHeader>
      <CardContent>
        <div className="text-2xl font-bold">{value}</div>
        {trend !== undefined && (
          <p className={`text-xs ${trend >= 0 ? 'text-green-500' : 'text-red-500'} flex items-center`}>
            <TrendingUp className={`mr-1 h-3 w-3 ${trend < 0 ? 'rotate-180' : ''}`} />
            {Math.abs(trend)}% по сравнению с прошлым периодом
          </p>
        )}
      </CardContent>
    </Card>
  )
}

// Компонент полосы ресурсов
function ResourceBar({ 
  label, 
  value, 
  icon: Icon, 
  color = 'blue' 
}: {
  label: string
  value: number
  icon: React.ElementType
  color?: 'blue' | 'green' | 'purple'
}) {
  const colorClasses = {
    blue: 'bg-blue-500',
    green: 'bg-green-500',
    purple: 'bg-purple-500',
  }
  
  return (
    <div className="space-y-2">
      <div className="flex items-center justify-between text-sm">
        <div className="flex items-center space-x-2">
          <Icon className="h-4 w-4 text-muted-foreground" />
          <span>{label}</span>
        </div>
        <span className="font-medium">{formatPercent(value)}</span>
      </div>
      <Progress value={value} className="h-2" indicatorClassName={colorClasses[color]} />
    </div>
  )
}

// Компонент индикатора тренда
function TrendIndicator({ value }: { value: number | string }) {
  if (typeof value === 'number') {
    return (
      <div className={`flex items-center text-sm ${value >= 0 ? 'text-green-500' : 'text-red-500'}`}>
        <TrendingUp className={`h-4 w-4 ${value < 0 ? 'rotate-180' : ''}`} />
      </div>
    )
  }
  
  const icons = {
    up: <TrendingUp className="h-4 w-4 text-green-500" />,
    down: <TrendingUp className="h-4 w-4 text-red-500 rotate-180" />,
    stable: <div className="h-4 w-4 text-gray-500">—</div>,
  }
  
  return icons[value as keyof typeof icons] || null
}

// Функция для рендеринга меток на круговой диаграмме
function renderCustomizedLabel({
  cx,
  cy,
  midAngle,
  innerRadius,
  outerRadius,
  percent,
}: any) {
  const radius = innerRadius + (outerRadius - innerRadius) * 0.5
  const x = cx + radius * Math.cos(-midAngle * Math.PI / 180)
  const y = cy + radius * Math.sin(-midAngle * Math.PI / 180)

  return (
    <text
      x={x}
      y={y}
      fill="white"
      textAnchor={x > cx ? 'start' : 'end'}
      dominantBaseline="central"
      className="text-xs font-medium"
    >
      {`${(percent * 100).toFixed(0)}%`}
    </text>
  )
}

// Функция для определения варианта Badge по серьезности
function getSeverityVariant(severity: string): 'default' | 'secondary' | 'destructive' | 'outline' {
  const variants = {
    low: 'default',
    medium: 'secondary',
    high: 'destructive',
    critical: 'destructive',
  }
  return variants[severity as keyof typeof variants] || 'default'
}

// Компонент скелетона для загрузки
function DashboardSkeleton() {
  return (
    <div className="flex-1 space-y-4 p-4 md:p-8 pt-6">
      <div className="space-y-2">
        <div className="h-8 w-48 bg-muted animate-pulse rounded" />
        <div className="h-4 w-64 bg-muted animate-pulse rounded" />
      </div>
      
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
        {[...Array(4)].map((_, i) => (
          <Card key={i}>
            <CardHeader className="space-y-2">
              <div className="h-4 w-24 bg-muted animate-pulse rounded" />
              <div className="h-8 w-32 bg-muted animate-pulse rounded" />
            </CardHeader>
          </Card>
        ))}
      </div>
      
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-7">
        <Card className="col-span-4">
          <CardHeader>
            <div className="h-6 w-32 bg-muted animate-pulse rounded" />
          </CardHeader>
          <CardContent>
            <div className="h-[350px] bg-muted animate-pulse rounded" />
          </CardContent>
        </Card>
        
        <Card className="col-span-3">
          <CardHeader>
            <div className="h-6 w-32 bg-muted animate-pulse rounded" />
          </CardHeader>
          <CardContent>
            <div className="h-[300px] bg-muted animate-pulse rounded" />
          </CardContent>
        </Card>
      </div>
    </div>
  )
}

export default withAuth(DashboardPage)